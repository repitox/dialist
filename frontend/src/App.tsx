import React, { useState, useEffect } from 'react';
import TelegramLogin from './components/TelegramLogin';
import './App.css';

interface User {
  id: number;
  name: string;
  telegram_username?: string;
  telegram_photo_url?: string;
  auth_provider: string;
  phone?: string;
}

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  language_code?: string;
  auth_date: number;
  hash: string;
}

function App() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const botUsername = process.env.REACT_APP_TELEGRAM_BOT_USERNAME || 'your_bot_username';
  const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      fetchUser(token);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const fetchUser = async (token: string) => {
    try {
      setLoading(true);
      const response = await fetch(`${apiUrl}/user`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setUser(data.user);
      } else {
        localStorage.removeItem('auth_token');
      }
    } catch (err) {
      console.error('Error fetching user:', err);
      localStorage.removeItem('auth_token');
    } finally {
      setLoading(false);
    }
  };

  const handleTelegramAuth = async (telegramUser: TelegramUser) => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`${apiUrl}/auth/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(telegramUser),
      });

      const data = await response.json();

      if (data.success) {
        localStorage.setItem('auth_token', data.token);
        setUser(data.user);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        window.location.href = '/main';
      } else {
        setError(data.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      console.error('Auth error:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      const token = localStorage.getItem('auth_token');
      if (token) {
        await fetch(`${apiUrl}/logout`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });
      }
    } catch (err) {
      console.error('Logout error:', err);
    } finally {
      localStorage.removeItem('auth_token');
      setUser(null);
    }
  };

  if (loading) {
    return (
      <div className="App">
        <div className="loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  if (user) {
    return (
      <div className="App">
        <header className="header">
          <div className="header-content">
            <div className="logo-section">
              <h1 className="logo">Dialist</h1>
              <p className="tagline">–ø–µ—Ä–µ—Å—Ç–∞–≤–∞–π –∑–∞–±—ã–≤–∞—Ç—å</p>
            </div>
            
            <div className="user-welcome">
              {user.telegram_photo_url && (
                <img 
                  src={user.telegram_photo_url} 
                  alt="Profile" 
                  className="profile-photo-small"
                />
              )}
              <span className="welcome-text">–ü—Ä–∏–≤–µ—Ç, {user.name}!</span>
            </div>
          </div>
        </header>

        <main className="main-content">
          <div className="user-dashboard">
            <div className="user-info-card">
              {user.telegram_photo_url && (
                <img 
                  src={user.telegram_photo_url} 
                  alt="Profile" 
                  className="profile-photo"
                />
              )}
              <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!</h2>
              <p>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑: {user.auth_provider}</p>
              {user.telegram_username && (
                <p>Telegram: @{user.telegram_username}</p>
              )}
              {user.phone && (
                <p>–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}</p>
              )}
            </div>
            
            <div className="actions">
              <button 
                onClick={() => window.location.href = '/main'}
                className="main-button"
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω–µ–≤–Ω–∏–∫—É
              </button>
              <button 
                onClick={handleLogout}
                className="logout-button"
              >
                –í—ã–π—Ç–∏
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="App">
      {/* –®–∞–ø–∫–∞ */}
      <header className="header">
        <div className="header-content">
          <div className="logo-section">
            <h1 className="logo">Dialist</h1>
            <p className="tagline">–ø–µ—Ä–µ—Å—Ç–∞–≤–∞–π –∑–∞–±—ã–≤–∞—Ç—å</p>
          </div>
          
          <div className="auth-button-wrapper">
            {error && (
              <div className="error-message">
                {error}
              </div>
            )}
            <TelegramLogin
              botUsername={botUsername}
              onAuth={handleTelegramAuth}
              buttonSize="large"
            />
          </div>
        </div>
      </header>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –±–ª–æ–∫ */}
      <main className="main-content">
        <div className="masonry-grid">
          {/* –ì–ª–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ */}
          <div className="card card-hero">
            <div className="card-content">
              <h1 className="hero-title">Dialist</h1>
              <p className="hero-subtitle">–¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é AI –ø–æ–º–æ—â–Ω–∏–∫–æ–≤</p>
              <div className="hero-features">
                <span className="feature-tag">‚ú® AI-–ø–æ–º–æ—â–Ω–∏–∫</span>
                <span className="feature-tag">üì± Telegram-–±–æ—Ç</span>
                <span className="feature-tag">üë• –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞</span>
              </div>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∑–∞–¥–∞—á */}
          <div className="card card-feature">
            <div className="card-icon">üìã</div>
            <div className="card-content">
              <h3>–¢—Ä–µ–∫–∏–Ω–≥ –∑–∞–¥–∞—á</h3>
              <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏, –æ–±—ä–µ–¥–∏–Ω—è–π—Ç–µ –∏—Ö –≤ –ø—Ä–æ–µ–∫—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å—Ä–æ–∫–∏.</p>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ */}
          <div className="card card-feature card-tall">
            <div className="card-icon">üë•</div>
            <div className="card-content">
              <h3>–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø</h3>
              <p>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç—ã –¥–æ 5 —á–µ–ª–æ–≤–µ–∫, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–µ–ª</p>
              <div className="collaboration-preview">
                <div className="avatar-group">
                  <div className="avatar">üë§</div>
                  <div className="avatar">üë§</div>
                  <div className="avatar">üë§</div>
                  <div className="avatar-more">+2</div>
                </div>
              </div>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ Telegram */}
          <div className="card card-feature">
            <div className="card-icon">üì±</div>
            <div className="card-content">
              <h3>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram</h3>
              <p>–î–æ—Å—Ç—É–ø–µ–Ω Telegram-–±–æ—Ç —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É</p>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ */}
          <div className="card card-pricing">
            <div className="card-content">
              <div className="pricing-icon">üí∞</div>
              <h3>–ì–∏–±–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã</h3>
              <p>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ —Ü–µ–Ω–µ –∫—Ä—É–∂–∫–∏ –∫–æ—Ñ–µ</p>
              <div className="price-tag">
                <span className="price">7 –¥–Ω–µ–π</span>
                <span className="price-label">–±–µ—Å–ø–ª–∞—Ç–Ω–æ</span>
              </div>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π */}
          <div className="card card-social">
            <div className="card-content">
              <h3>–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π</h3>
              <div className="social-links-compact">
                <a href="https://dzen.ru/dialist_ya" target="_blank" rel="noopener noreferrer" className="social-link-compact">
                  <span className="social-icon">üì∞</span>
                  <span>–î–∑–µ–Ω</span>
                </a>
                <a href="https://x.com/dialist_x" target="_blank" rel="noopener noreferrer" className="social-link-compact">
                  <span className="social-icon">üê¶</span>
                  <span>X</span>
                </a>
                <a href="https://t.me/dialist_tg" target="_blank" rel="noopener noreferrer" className="social-link-compact">
                  <span className="social-icon">üì¢</span>
                  <span>Telegram</span>
                </a>
              </div>
            </div>
          </div>

          {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
          <div className="card card-stats">
            <div className="card-content">
              <h3>–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç</h3>
              <div className="stats-grid">
                <div className="stat-item">
                  <div className="stat-number">1000+</div>
                  <div className="stat-label">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div className="stat-item">
                  <div className="stat-number">5000+</div>
                  <div className="stat-label">–∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

export default App;
